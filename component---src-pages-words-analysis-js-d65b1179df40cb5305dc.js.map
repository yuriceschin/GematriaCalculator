{"version":3,"sources":["webpack:///./src/pages/words-analysis.js","webpack:///./src/components/layout.js"],"names":["A","props","onSort","column","e","direction","state","sort","sortedColumns","data","a","b","nameA","node","word","toUpperCase","nameB","value","count","reverse","setState","users","setArrow","className","allRecurrencesCsv","edges","bind","render","onClick","this","map","row","i","key","React","Component","IndexQuery","ListLink","to","children","id"],"mappings":"wOAIqBA,E,oBACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAWFC,OAAS,SAAAC,GACP,OAAO,SAAAC,GACL,IAAMC,EAAY,EAAKC,MAAMC,KAAKJ,OACA,QAA9B,EAAKG,MAAMC,KAAKF,UACd,OACA,MACF,OACEG,EAAgB,EAAKF,MAAMG,KAAKF,MAAK,SAACG,EAAGC,GAC7C,OAAQR,GACN,IAAK,OACH,IAAMS,EAAQF,EAAEG,KAAKC,KAAKC,cACpBC,EAAQL,EAAEE,KAAKC,KAAKC,cAE1B,OAAIH,EAAQI,GAAe,EACvBJ,EAAQI,EAAc,EACd,EAEd,IAAK,QACH,IAAMJ,EAAuB,EAAfF,EAAEG,KAAKI,MACfD,EAAuB,EAAfL,EAAEE,KAAKI,MAErB,OAAIL,EAAQI,GAAe,EACvBJ,EAAQI,EAAc,EACd,EAEd,IAAK,QACH,IAAMJ,EAAuB,EAAfF,EAAEG,KAAKK,MACfF,EAAuB,EAAfL,EAAEE,KAAKK,MAErB,OAAIN,EAAQI,GAAe,EACvBJ,EAAQI,EAAc,EACd,EAEd,QACE,OAAON,EAAIC,MAIC,SAAdN,GACFG,EAAcW,UAGhB,EAAKC,SAAS,CACZC,MAAOb,EACPD,KAAM,CACJJ,SACAE,iBA1DW,EAgEnBiB,SAAW,SAAAnB,GACT,IAAIoB,EAAY,iBAMhB,OAJI,EAAKjB,MAAMC,KAAKJ,SAAWA,IAC7BoB,GAA2C,QAA9B,EAAKjB,MAAMC,KAAKF,UAAsB,OAAS,SAGvDkB,GArEP,EAAKjB,MAAQ,CACXG,KAAM,EAAKR,MAAMQ,KAAKe,kBAAkBC,MACxClB,KAAM,CACJJ,OAAQ,QACRE,UAAW,SAGf,EAAKH,OAAS,EAAKA,OAAOwB,K,yHAAZ,KATG,E,0GA0EnBC,OAAA,WACE,OACE,kBAAC,IAAD,KACE,sEAEA,yCACA,8NAG6C,8CAE7C,wHAIA,qKAEgE,IAC9D,8CAEF,8RAMA,iRAIqC,8CAarC,kDACsB,wCADtB,yBACkE,IAChE,wCAFF,8CAGE,6BAHF,qHAOA,yBAAKJ,UAAU,SACb,yBAAKA,UAAU,UACb,yBAAKK,QAASC,KAAK3B,OAAO,SAA1B,OAEE,0BAAMqB,UAAS,GAAKM,KAAKP,SAAS,WAEpC,yBAAKM,QAASC,KAAK3B,OAAO,UAA1B,QAEE,0BAAMqB,UAAWM,KAAKP,SAAS,YAEjC,yBAAKM,QAASC,KAAK3B,OAAO,UAA1B,QAEE,0BAAMqB,UAAWM,KAAKP,SAAS,aAGnC,yBAAKC,UAAU,QACZM,KAAKvB,MAAMG,KAAKqB,KAAI,SAACC,EAAKC,GAAN,OACnB,yBAAKT,UAAU,MAAMU,IAAQF,EAAIlB,KAAKC,KAAd,IAAsBkB,GAC5C,6BAAMD,EAAIlB,KAAKC,MACf,6BAAMiB,EAAIlB,KAAKI,OACf,6BAAMc,EAAIlB,KAAKK,e,GAjJAgB,IAAMC,WA2JxBC,EAAU,c,kCC/JvB,qCAIMC,GAJN,UAIiB,SAAApC,GAAK,OACpB,4BACE,kBAAC,OAAD,CAAMqC,GAAIrC,EAAMqC,IAAKrC,EAAMsC,aAIhB,oBAAGA,EAAH,EAAGA,SAAH,OACb,6BACE,gCACE,kBAAC,OAAD,CAAMD,GAAG,IAAIE,GAAG,SACd,uDAEF,4BACE,kBAACH,EAAD,CAAUC,GAAG,KAAb,QACA,kBAACD,EAAD,CAAUC,GAAG,WAAb,SACA,kBAACD,EAAD,CAAUC,GAAG,oBAAb,oBAIHC,EAED,gCACE","file":"component---src-pages-words-analysis-js-d65b1179df40cb5305dc.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\n\nexport default class A extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data.allRecurrencesCsv.edges,\n      sort: {\n        column: \"count\",\n        direction: \"desc\"\n      }\n    };\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort = column => {\n    return e => {\n      const direction = this.state.sort.column\n        ? this.state.sort.direction === \"asc\"\n          ? \"desc\"\n          : \"asc\"\n        : \"desc\";\n      const sortedColumns = this.state.data.sort((a, b) => {\n        switch (column) {\n          case \"word\": {\n            const nameA = a.node.word.toUpperCase(); // ignore upper and lowercase\n            const nameB = b.node.word.toUpperCase(); // ignore upper and lowercase\n\n            if (nameA < nameB) return -1;\n            if (nameA < nameB) return 1;\n            else return 0;\n          }\n          case \"value\": {\n            const nameA = a.node.value * 1; // ignore upper and lowercase\n            const nameB = b.node.value * 1; // ignore upper and lowercase\n\n            if (nameA < nameB) return -1;\n            if (nameA < nameB) return 1;\n            else return 0;\n          }\n          case \"count\": {\n            const nameA = a.node.count * 1; // ignore upper and lowercase\n            const nameB = b.node.count * 1; // ignore upper and lowercase\n\n            if (nameA < nameB) return -1;\n            if (nameA < nameB) return 1;\n            else return 0;\n          }\n          default:\n            return a - b;\n        }\n      });\n\n      if (direction === \"desc\") {\n        sortedColumns.reverse();\n      }\n\n      this.setState({\n        users: sortedColumns,\n        sort: {\n          column,\n          direction\n        }\n      });\n    };\n  };\n\n  setArrow = column => {\n    let className = \"sort-direction\";\n\n    if (this.state.sort.column === column) {\n      className += this.state.sort.direction === \"asc\" ? \" asc\" : \" desc\";\n    }\n\n    return className;\n  };\n\n  render() {\n    return (\n      <Layout>\n        <h2>Liber AL - Words value and recurrences</h2>\n\n        <h4>Preamble:</h4>\n        <blockquote>\n          My scribe Ankh-af-na-khonsu, the priest of the princes, shall not in\n          one letter change this book; but lest there be folly, he shall comment\n          thereupon by the wisdom of Ra-Hoor-Khu-it. <strong>(AL 1,36)</strong>\n        </blockquote>\n        <p>\n          The same word with or without the capital letter is considered to be\n          two different words.\n        </p>\n        <blockquote>\n          Change not as much as the style of a letter; for behold! thou, o\n          prophet, shalt not behold all these mysteries hidden therein.{\" \"}\n          <strong>(AL 1,54)</strong>\n        </blockquote>\n        <p>\n          All punctuation marks have been removed. The value of the accented\n          letters has been calculated as the letter itself. The value of numbers\n          it's the number's value itself. The value of greek and hebrew words\n          have been calculated with that relative gematria.\n        </p>\n        <blockquote>\n          Nor shall they who cry aloud their folly that thou meanest nought\n          avail; thou shall reveal it: thou availest: they are the slaves of\n          because: They are not of me. The stops as thou wilt; the letters?\n          change them not in style or value! <strong>(AL 2,54)</strong>\n        </blockquote>\n        {/* <blockquote>\n          This book shall be translated into all tongues: but always with the\n          original in the writing of the Beast; for in the chance shape of the\n          letters and their position to one another: in these are mysteries that\n          no Beast shall divine. Let him not seek to try: but one cometh after\n          him, whence I say not, who shall discover the Key of it all. Then this\n          line drawn is a key: then this circle squared in its failure is a key\n          also. And Abrahadabra. It shall be his child & that strangely. Let him\n          not seek after this; for thereby alone can he fall from it.{\" \"}\n          <strong>(AL 3,47)</strong>\n        </blockquote> */}\n        <p>\n          There is a total of <strong>6009</strong> words in Liber AL and{\" \"}\n          <strong>1344</strong> different words (including numbers and &).\n          <br />\n          Here you can find each word, its value based upon the TQ Gematria and\n          the number of times it appears in Liber AL.\n        </p>\n        <div className=\"table\">\n          <div className=\"header\">\n            <div onClick={this.onSort(\"word\")}>\n              Word\n              <span className={`${this.setArrow(\"word\")}`} />\n            </div>\n            <div onClick={this.onSort(\"value\")}>\n              Value\n              <span className={this.setArrow(\"value\")} />\n            </div>\n            <div onClick={this.onSort(\"count\")}>\n              Count\n              <span className={this.setArrow(\"count\")} />\n            </div>\n          </div>\n          <div className=\"body\">\n            {this.state.data.map((row, i) => (\n              <div className=\"row\" key={`${row.node.word} ${i}`}>\n                <div>{row.node.word}</div>\n                <div>{row.node.value}</div>\n                <div>{row.node.count}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const IndexQuery = graphql`\n  query {\n    allRecurrencesCsv {\n      edges {\n        node {\n          word\n          value\n          count\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport \"./layout.css\";\n\nconst ListLink = props => (\n  <li>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n);\n\nexport default ({ children }) => (\n  <div>\n    <header>\n      <Link to=\"/\" id=\"title\">\n        <h1>TQ Gematria Calculator</h1>\n      </Link>\n      <ul>\n        <ListLink to=\"/\">Home</ListLink>\n        <ListLink to=\"/about/\">About</ListLink>\n        <ListLink to=\"/words-analysis/\">Words Analysis</ListLink>\n      </ul>\n    </header>\n\n    {children}\n\n    <footer>\n      <p>Copyright 2020 Â© O.T.O. Italy. All rights reserved.</p>\n    </footer>\n  </div>\n);\n"],"sourceRoot":""}